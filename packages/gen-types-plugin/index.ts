import { Project } from "ts-morph";
import z from "zod";
import { OpenAPISpec } from "@open-api-poc/open-api-validator";

export function gen(spec: z.infer<typeof OpenAPISpec>, outdir: string) {
  const formatOptions = {
    indentMultiLineObjectLiteralBeginningOnBlankLine: true,
    ensureNewLineAtEndOfFile: true,
    indentSize: 2,
  };
  const project = new Project();

  const typesFile = project.createSourceFile(
    `${outdir}/types.ts`,
    (writer) => {
      writer.writeLine(`// This file is auto-generated by <your tool name>.
        // Changes to this file may be overwritten.`);

      writer.blankLine();

      writer.writeLine(`import z from "zod";`);

      writer.blankLine();

      // parameters
      for (const [path, methods] of Object.entries(spec.paths)) {
        for (const [_method, { operationId, parameters }] of Object.entries(
          methods
        )) {
          writer.writeLine(
            `export const ${operationId}_Parameters = z.object({`
          );

          parameters?.forEach((param) => {
            // TODO: Recursively build up the parameter types from  param.schema
            writer.writeLine(`${param.name}: z.coerce.string(),`);
          });
        }

        writer.writeLine("});");
        writer.blankLine();

        // responses
        for (const [_method, { operationId, responses }] of Object.entries(
          methods
        )) {
          for (const [status, { content }] of Object.entries(responses)) {
            for (const [contentType, { schema }] of Object.entries(content)) {
              writer.writeLine(
                `export const ${operationId}_ResponseBody = z.object({`
              );

              writer.writeLine(`status: z.literal("${status}"),`);
              writer.writeLine(`content: z.record(z.object({`);

              for (const [prop, { type }] of Object.entries(
                schema.properties
              )) {
                // TODO: Recursively build up the parameter types from  param.schema
                writer.writeLine(`${prop}: z.coerce.${type}(),`);
              }

              writer.writeLine("})),");
              writer.writeLine("});");
            }
          }
        }
      }
    },
    { overwrite: true }
  );
  typesFile.formatText(formatOptions);
  typesFile.saveSync();
}
