import { Project } from "ts-morph";
import { OpenAPISpec } from "@open-api-poc/open-api-validator";

export function gen(spec: OpenAPISpec, outdir: string) {
  const formatOptions = {
    indentMultiLineObjectLiteralBeginningOnBlankLine: true,
    ensureNewLineAtEndOfFile: true,
    indentSize: 2,
  };
  const project = new Project();

  const sourceFile = project.createSourceFile(`${outdir}/server.ts`, "", {
    overwrite: true,
  });

  sourceFile.addImportDeclaration({
    defaultImport: "* as types",
    moduleSpecifier: "./types",
  });

  for (const [path, methods] of Object.entries(spec.paths)) {
    sourceFile.addInterface({
      name: "APIService",
      isExported: true,
      properties: Object.entries(methods).map(
        ([_method, { operationId, requestBody }]) => {
          const typeString = requestBody
            ? `({params, requestBody}: { params?: types.${operationId}_Parameters, requestBody?: types.${operationId}_RequestBody }) => Promise<types.${operationId}_ResponseBody>`
            : `({params}: { params?: types.${operationId}_Parameters }) => Promise<types.${operationId}_ResponseBody>`;

          return {
            name: operationId,
            type: typeString,
          };
        }
      ),
    });
  }

  for (const [path, methods] of Object.entries(spec.paths)) {
    const registerServiceFn = sourceFile.addFunction({
      name: "registerService",
      isExported: true,
      parameters: [{ name: "service", type: "APIService" }],
    });

    let bodyBuffer = "return [\n";

    for (const [method, { operationId, requestBody }] of Object.entries(
      methods
    )) {
      bodyBuffer += `{
          path: "${path}",
          method: "${method}" as const,
          paramType: types.${operationId}_Parameters,
          responseType: types.${operationId}_ResponseBody,
          requestBodyType: ${
            requestBody ? `types.${operationId}_RequestBody` : "undefined"
          },
          handler: service.${operationId},
        },`;
    }

    bodyBuffer += "];";

    registerServiceFn.setBodyText(bodyBuffer);
  }

  sourceFile.insertText(
    0,
    `// This file is auto-generated by <your tool name>.
  // Changes to this file may be overwritten.

  `
  );

  sourceFile.formatText(formatOptions);
  sourceFile.saveSync();
}
