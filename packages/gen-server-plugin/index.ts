import { Project } from "ts-morph";
import { OpenAPISpec } from "@open-api-poc/open-api-validator";

export function gen(spec: OpenAPISpec, outdir: string) {
  const formatOptions = {
    indentMultiLineObjectLiteralBeginningOnBlankLine: true,
    ensureNewLineAtEndOfFile: true,
    indentSize: 2,
  };
  const project = new Project();

  const sourceFile = project.createSourceFile(`${outdir}/server.ts`, "", {
    overwrite: true,
  });

  sourceFile.addImportDeclaration({
    defaultImport: "* as types",
    moduleSpecifier: "./types",
  });

  const apiInterface = sourceFile.addInterface({
    name: "APIService",
    isExported: true,
  });

  for (const [path, methods] of Object.entries(spec.paths)) {
    Object.entries(methods).map(
      ([_method, { operationId, requestBody, parameters }]) => {
        let typeString = "";

        // TODO: Fix this set of conditions.
        if (requestBody && parameters) {
          typeString = `({params, requestBody}: { params?: types.${operationId}_Parameters, requestBody?: types.${operationId}_RequestBody }) => Promise<types.${operationId}_ResponseBody>`;
        }
        if (requestBody && !parameters) {
          typeString = `({requestBody}: { requestBody?: types.${operationId}_RequestBody }) => Promise<types.${operationId}_ResponseBody>`;
        }
        if (!requestBody && parameters) {
          typeString = `({params}: { params?: types.${operationId}_Parameters }) => Promise<types.${operationId}_ResponseBody>`;
        }
        if (!requestBody && !parameters) {
          typeString = `() => Promise<types.${operationId}_ResponseBody>`;
        }

        apiInterface.addProperties([
          {
            name: operationId,
            type: typeString,
          },
        ]);
      } // prettier-ignore wtf why is this happening
    );
  }

  const registerServiceFn = sourceFile.addFunction({
    name: "registerService",
    isExported: true,
    parameters: [{ name: "service", type: "APIService" }],
  });

  let bodyBuffer = "return [\n";

  for (const [path, methods] of Object.entries(spec.paths)) {
    for (const [
      method,
      { operationId, requestBody, parameters },
    ] of Object.entries(methods)) {
      bodyBuffer += `{
          path: "${path}",
          method: "${method}" as const,
          paramType: ${
            parameters ? `types.${operationId}_Parameters` : "undefined"
          },
          responseType: types.${operationId}_ResponseBody,
          requestBodyType: ${
            requestBody ? `types.${operationId}_RequestBody` : "undefined"
          },
          handler: service.${operationId},
        },`;
    }
  }
  bodyBuffer += "\n];";

  registerServiceFn.setBodyText(bodyBuffer);

  sourceFile.insertText(
    0,
    `// This file is auto-generated by <your tool name>.
  // Changes to this file may be overwritten.

  `
  );

  sourceFile.formatText(formatOptions);
  sourceFile.saveSync();
}
